

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode


call vundle#begin()
"call vundle#begin('~/some/path/here')

Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'file:///home/gmarik/path/to/plugin'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

call vundle#end()            " required
autocmd FileType typescript :set makeprg=tsc


"-------------------------------------------------------------------------------
" Vundle 
"-------------------------------------------------------------------------------
call vundle#begin()
Plugin 'leafgarland/typescript-vim'
call vundle#end()            " required
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''

"-------------------------------------------------------------------------------
" Google Code Format 
"-------------------------------------------------------------------------------
call vundle#begin()
" Add maktaba and codefmt to the runtimepath.
" (The latter must be installed before it can be used.)
Plugin 'google/vim-maktaba'
Plugin 'google/vim-codefmt'

Plugin 'leafgarland/typescript-vim'
Plugin 'millermedeiros/vim-esformatter'
Plugin 'google/vim-glaive'
Plugin 'cohama/lexima.vim'

Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimfiler'
Plugin 'Shougo/neocomplcache'

Plugin 'posva/vim-vue'


" ...
call vundle#end()

autocmd BufRead,BufNewFile *.ts set filetype=typescript
autocmd BufRead,BufNewFile *.tsx set filetype=typescript
autocmd BufNewFile,BufRead *.{html,htm,vue*} set filetype=html



augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  autocmd FileType typescript AutoFormatBuffer tsc
  " autocmd FileType javascript AutoFormatBuffer Esformatter
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
augroup END
nnoremap <S-f> :FormatCode<CR>

autocmd BufNewFile,BufRead *.js nnoremap <S-f> :Esformatter<CR>
autocmd BufNewFile,BufRead *.jsx nnoremap <S-f> :Esformatter<CR>
autocmd BufNewFile,BufRead *.ts nnoremap <S-f> :Esformatter<CR>
autocmd BufNewFile,BufRead *.tsx nnoremap <S-f> :Esformatter<CR>

autocmd BufNewFile,BufRead *.rb nnoremap <C-e> :!ruby %
autocmd BufNewFile,BufRead *.py nnoremap <C-e> :!python %
autocmd BufNewFile,BufRead *.pl nnoremap <C-e> :!perl %



"""-------------------------------------------------------------------------------
""" Completion
"""-------------------------------------------------------------------------------
""
""" Parenthesis
""inoremap { {}<LEFT>
""inoremap [ []<LEFT>
"""inoremap ( ()<LEFT>
""inoremap ( ()<ESC>i
""inoremap " ""<LEFT>
""inoremap ' ''<LEFT>
""vnoremap { "zdi^V{<C-R>z}<ESC>
""vnoremap [ "zdi^V[<C-R>z]<ESC>
""vnoremap ( "zdi^V(<C-R>z)<ESC>
""vnoremap " "zdi^V"<C-R>z^V"<ESC>
""vnoremap ' "zdi'<C-R>z'<ESC>
""
""function! DeleteParenthesesAdjoin() " http://qiita.com/m_mysht/items/56e5d5a17d07a64d8b65
""    let pos = col(".") - 1
""    let str = getline(".")
""    let parentLList = ["(", "[", "{", "\'", "\""]
""    let parentRList = [")", "]", "}", "\'", "\""]
""    let cnt = 0
""
""    let output = ""
""
""    if pos == strlen(str)
""        return "\b"
""    endif
""    for c in parentLList
""        if str[pos-1] == c && str[pos] == parentRList[cnt]
""            call cursor(line("."), pos + 2)
""            let output = "\b"
""            break
""        endif
""        let cnt += 1
""    endfor
""    return output."\b"
""endfunction
""inoremap <silent> <BS> <C-R>=DeleteParenthesesAdjoin()<CR>
""inoremap <silent> <C-h> <C-R>=DeleteParenthesesAdjoin()<CR>
""
""
""nnoremap ^ I
""nnoremap $ A

"-------------------------------------------------------------------------------
" neocomplcache
"-------------------------------------------------------------------------------
""highlight Pmenu ctermbg=4
""highlight PmenuSel ctermbg=1
""highlight PMenuSbar ctermbg=4
""
""" 補完ウィンドウの設定
""set completeopt=menuone
""
""" 補完ウィンドウの設定
""set completeopt=menuone
""
""" rsenseでの自動補完機能を有効化
""let g:rsenseUseOmniFunc = 1
""" let g:rsenseHome = '/usr/local/lib/rsense-0.3'
""
""" auto-ctagsを使ってファイル保存時にtagsファイルを更新
""let g:auto_ctags = 1
""
""" 起動時に有効化
""let g:neocomplcache_enable_at_startup = 1
""
""" 大文字が入力されるまで大文字小文字の区別を無視する
""let g:neocomplcache_enable_smart_case = 1
""
""" _(アンダースコア)区切りの補完を有効化
""let g:neocomplcache_enable_underbar_completion = 1
""
""let g:neocomplcache_enable_camel_case_completion  =  1
""
""" 最初の補完候補を選択状態にする
""let g:neocomplcache_enable_auto_select = 1
""
""" ポップアップメニューで表示される候補の数
""let g:neocomplcache_max_list = 20
""
""" シンタックスをキャッシュするときの最小文字長
""let g:neocomplcache_min_syntax_length = 3
""
""let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
""
""" Define dictionary.
""let g:neocomplcache_dictionary_filetype_lists = {
""    \ 'default' : ''
""    \ }
""
""" Plugin key-mappings.
""inoremap <expr><C-g>     neocomplcache#undo_completion()
""inoremap <expr><C-l>     neocomplcache#complete_common_string()
""
""" Recommended key-mappings.
""" <CR>: close popup and save indent.
""inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
""function! s:my_cr_function()
""  return neocomplcache#smart_close_popup() . "\<CR>"
""endfunction
""" <TAB>: completion.
""inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
""" <C-h>, <BS>: close popup and delete backword char.
""inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
""inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
""inoremap <expr><C-y>  neocomplcache#close_popup()
""inoremap <expr><C-e>  neocomplcache#cancel_popup()
""
""" 補完の設定
""autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
""if !exists('g:neocomplete#force_omni_input_patterns')
""  let g:neocomplete#force_omni_input_patterns = {}
""endif
""let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'
""
""if !exists('g:neocomplete#keyword_patterns')
""        let g:neocomplete#keyword_patterns = {}
""endif
""let g:neocomplete#keyword_patterns['default'] = '\h\w*'
