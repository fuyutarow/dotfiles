[tasks.link]
script = '''
ls -A ${CARGO_MAKE_WORKING_DIRECTORY}/dotfiles | xargs -I {} ln -sfv ${CARGO_MAKE_WORKING_DIRECTORY}/dotfiles/{} ~
'''

[tasks.add-ssl]
script = ['''
sudo apt install pkg-config libssl-dev
''']

[tasks.add-cargoapp]
script = ['''
cargo install cargo-make
cargo install cargo-edit
''']

[tasks.up-apt]
script = ['''
sudo apt update && sudo apt upgrade -y
''']

[tasks.add-brew]
script = [
  '''
git clone https://github.com/Homebrew/brew ~/.linuxbrew/Homebrew
mkdir ~/.linuxbrew/bin
ln -s ~/.linuxbrew/Homebrew/bin/brew ~/.linuxbrew/bin
echo ~/.linuxbrew
''',
]

[tasks.up-brew]
script = ['''
brew update
brew upgrade
brew cleanup
''']

[tasks.up-cask]
script = ['''
brew cask upgrade
''']

[tasks.add-vue]
script = ['''
yarn global add @vue/cli
''']

[tasks.up-vue]
script = ['''
yarn global upgrade --latest @vue/cli
''']

[tasks.install-zsh]
run_task = { name = ["add-zsh", "add-zinit"] }

[tasks.add-zsh]
script = [
  '''
brew install zsh
# sudo apt install zsh
command -v zsh | sudo tee -a /etc/shells
sudo chsh -s "$(command -v zsh)" "${USER}"
''',
]

[tasks.add-zinit]
script = [
  '''
sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)"
compaudit | xargs chmod go-w
''',
]

[tasks.install-dev]
run_task = { name = [
  "add-dev",
  "install-vim",
  "install-node",
  "install-python",
  "install-go",
] }

[tasks.install-vim]
run_task = { name = ["add-vim", "add-dein", "up-dein", "add-coc"] }

[tasks.add-vim]
script = [
  '''
brew install neovim
mkdir -p ~/.config/
ln -svf ~/dotfiles/nvim ~/.config/nvim
''',
]

[tasks.add-dein]
script = [
  '''
curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
sh ./installer.sh ~/.cache/dein
nvim +":call dein#install()" +qa
''',
]

[tasks.up-dein]
script = ['''
nvim +":call dein#update()" +qa
''']

[tasks.add-wasm]
script = [
  '''
rustup update
# rustup target add wasm32-unknown-unknown --toolchain nightly
# cargo install wasm-pack
curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
cargo install wasm-bindgen-cli
''',
]

[tasks.add-coc]
script = [
  '''
nvim +":CocInstall coc-rls" +qa # Rust
nvim +":CocInstall coc-python" +qa
nvim +":CocInstall coc-tsserver" +qa # TypeScript
nvim +":CocInstall coc-html" +qa
nvim +":CocInstall coc-css" +qa
nvim +":CocInstall coc-yaml" +qa
nvim +":CocInstall coc-vetur" +qa # Vue
nvim +":CocInstall coc-solargraph" +qa # Ruby
nvim +":CocInstall coc-emoji" +qa # for Markdown file only
brew install shfmt # sh
''',
]

[tasks.add-dev]
script = [
  '''
eval $(~/.linuxbrew/bin/brew shellenv)
brew update
brew install git
brew install exa # alternative for `ls`
brew install sl # alternative for `ls`
brew install fuyutarow/commad/commad # alternative for `cd`
# brew install lolcat # alternative for `cat`
brew install colordiff # alternative for `diff`
brew install translate-shell # `trans`
brew install jq
''',
]

[tasks.install-node]
run_task = { name = ["add-node", "add-nodeapp"] }

[tasks.add-node]
script = [
  '''
curl -L git.io/nodebrew | perl - setup
# export PATH=$HOME/.nodebrew/current/bin:$PATH
nodebrew install latest
nodebrew use latest
echo ~/.env.d/node.sh
''',
]

[tasks.add-nodeapp]
script = [
  '''
npm install -g yarn
npm install -g ts-node typescript
npm i -g fast-cli
npm i -g firebase-tools
''',
]

[tasks.install-go]
run_task = { name = ["add-go", "add-goapp"] }

[tasks.add-go]
script = ['''
brew install go
''']

[tasks.add-goapp]
script = ['''
go get github.com/sclevine/yj
''']

[tasks.install-python]
run_task = { name = ["add-python", "add-pythonapp"] }

[tasks.add-python]
script = [
  '''
brew install pyenv pipx
poetry completions zsh > ~/.zfunc/_poetry
echo ~/.env.d/python.sh
''',
]

[tasks.add-pythonapp]
script = [
  '''
pipx install poetry
pipx install sshuttle
pipx install jupyter-core
pipx install notebook
''',
]

[tasks.add-python-mac]
script = [
  '''
brew install pyenv
curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
poetry completions zsh > ~/.zfunc/_poetry
''',
]

[tasks.add-python-linux]
script = [
  '''
curl https://pyenv.run | bash
curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
poetry completions zsh > ~/.zfunc/_poetry
''',
]

[tasks.up-rust]
script = [
  '''
rustup update
rustup component add rls rust-analysis rust-src ;: LPS
rustup component add clippy
cargo install cargo-edit ;: subcommand `add`, `rm`, `upgrade`
cargo install --force cargo-make
''',
]

[tasks.link-ssh]
script = [
  '''
mkdir -p ~/.ssh
ln -svf ~/Gdrive/ssh/common/config ~/.ssh/config
ln -svf ~/Gdrive/ssh/common/config.d ~/.ssh/config.d
''',
]

[tasks.link-ssh-wsl]
script = [
  '''
mkdir -p ~/.ssh
cp /mnt/c/Users/fuyutarow/Gdrive/ssh/common/config ~/.ssh/config
cp -R /mnt/c/Users/fuyutarow/Gdrive/ssh/common/config.d/ ~/.ssh/config.d
chmod -R 644 ~/.ssh/config.d
chmod 644 ~/.ssh/config
chmod 700 ~/.ssh
chmod 600 ~/.ssh/id_rsa
chmod 600 ~/.ssh/id_rsa.pub
''',
]

[tasks.chmod-ssh]
script = [
  '''
chmod -R 644 ~/.ssh/config.d
chmod 644 ~/.ssh/config
chmod 700 ~/.ssh
chmod 600 ~/.ssh/id_rsa
chmod 600 ~/.ssh/id_rsa.pub
''',
]

[tasks.link-wsl]
script = [
  '''
ln -svf /mnt/c/Users/fuyutarow/Desktop/ ~
ln -svf /mnt/c/Users/fuyutarow/Downloads/ ~
ln -svf /mnt/c/Users/fuyutarow/Documents/ ~
ln -svf /mnt/c/Users/fuyutarow/Gdrive/ ~
''',
]

[tasks.add-macapp]
script = [
  '''
brew cask install\
	karabiner-elements\
	iterm2\
	shiftit\
	google-backup-and-sync\
	discord\
	slack\
	vivaldi\
	firefox\
	opera\
	chromium
''',
]

[tasks.add-scoop]
script_runner = "powershell.exe"
# script_extension = "ps1"
script = [
  '''
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
scoop bucket add extras
''',
]

[tasks.add-winapp-scoop]
script = [
  '''
scoop install
	autohotkey\
	discord\
	vivaldi\
	opera\
	terminus\
	chromium
''',
]
script_extension = "ps1"
script_runner = "powershell.exe"

[tasks.add-winapp]
dependencies = ["add-winapp-scoop"]
script = [
  '''
open https://www.google.com/drive/download/backup-and-sync/
open https://www.autohotkey.com
''',
]

[tasks.add-pwa]
dependencies = ["add-winapp-scoop"]
script = ['''
open https://drive.google.com
open https://photos.google.com
''']

[tasks.up-scoop]
script = ['''
scoop update *
scoop cleanup *
''']
script_extension = "ps1"
script_runner = "powershell.exe"

[tasks.ls-scoop]
script = ['''
scoop list
''']
script_extension = "ps1"
script_runner = "powershell.exe"

[tasks.add-julia]
linux_alias = "add-julia-linux"
mac_alias = "add-julia-mac"

[tasks.add-julia-mac]
script = [
  '''
brew cask iinstall julia
julia -e 'import Pkg; Pkg.add("jlpkg")'
julia -e 'import jlpkg; jlpkg.install()'
echo ~/.env.d/julia.sh
''',
]

[tasks.add-julia-linux]
script = [
  '''
wget https://julialang-s3.julialang.org/bin/musl/x64/1.5/julia-1.5.2-musl-x86_64.tar.gz -O julia.tar.gz
mkdir -p ~/.julia
tar zxvf julia.tar.gz -C ~/.julia --strip-components 1
rm julia.tar.gz
julia -e 'import Pkg; Pkg.add("jlpkg")'
julia -e 'import jlpkg; jlpkg.install()'
echo ~/.env.d/julia.sh
''',
]

[tasks.add-tex]
script = ['''
brew install texlive
''']

[tasks.up-tex]
script = [
  '''
tlmgr update --self
tlmgr install latexmk
tlmgr install collection-langjapanese
tlmgr install braket physics bbold here
''',
]

[tasks.add-ocaml]
script = ['''
brew install opam
''']

[tasks.add-satysfi]
dependencies = ['add-ocaml']
script = [
  '''
# sudo apt install m4 unzip
# sudo apt install bubblewrap
brew install --HEAD nyuichi/satysfi/satysfi
''',
]

[tasks.add-mimium-mac]
script = [
  '''
brew install cmake bison flex libsndfile rt-audio
git clone https://github.com/mimium-org/mimium mimium
cd $_
(
export PATH="/usr/local/opt/llvm/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/llvm/lib"
export CPPFLAGS="-I/usr/local/opt/llvm/include"
mkdir build && cd build
cmake ..
cmake --build . --target default_build -j
cmake --build . --target install
)
''',
]

[tasks.link-vscode]
script = [
  '''
ln -svf ${PWD}/vscode/settings.json /mnt/c/Users/fuyutarow/AppData/Roaming/Code\ -\ Insiders/User/settings.json
ln -svf ${PWD}/vscode/keybindings.json /mnt/c/Users/fuyutarow/AppData/Roaming/Code\ -\ Insiders/User/settings.json
''',
]

[tasks.add-llvm]
linux_alias = "add-llvm-linux"
mac_alias = "add-llvm-mac"

[tasks.add-llvm-mac]
script = ['''
brew install llvm
llvm-config --version
''']

[tasks.add-llvm-linux]
script = [
  '''
sudo apt install libncurses5
sudo ln -s /lib/x86_64-linux-gnu/libncursesw.so.5  /lib/x86_64-linux-gnu/libncursesw.so.6
brew install llvm
llvm-config --version
''',
]

[tasks.install-vscode]
linux_alias = "add-vscode-wsl"
mac_alias = "add-vscode-mac"

[tasks.add-vscode-wsl]
script = [
  '''
scoop install vscode
scoop install vscode-insiders
echo $ code .
echo $ code-insiders .
''',
]

[tasks.add-vscode-mac]
script = [
  '''
brew cask install visual-studio-code
brew cask install visual-studio-code-insiders
echo $ code .
echo $ code-insiders .
''',
]
